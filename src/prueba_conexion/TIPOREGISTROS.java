/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package prueba_conexion;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author nico-
 */
public class TIPOREGISTROS extends javax.swing.JFrame {

    /**
     * Creates new form TIPOREGISTROS
     */
    public TIPOREGISTROS() {
        initComponents();
         
        ctipo.removeAllItems();
            this.iniciarcombo();
            contador++;
            this.mostrar();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        ctipo = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabletipo = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(51, 255, 51));

        jLabel1.setText("TIPO DE REGISTROS");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(325, 325, 325)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(0, 255, 153));

        ctipo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        ctipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ctipoActionPerformed(evt);
            }
        });

        jLabel2.setText("TIPO DE REGISTRO:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(312, 312, 312)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(ctipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ctipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        tabletipo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tabletipo);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1029, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 455, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ctipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ctipoActionPerformed
        // TODO add your handling code here:
        if(this.contador>0){ 
         if(ctipo.getSelectedItem().equals("TODOS")){
         this.mostrar();
         }else  if(ctipo.getSelectedItem().equals("ACEPTANTES NATURALES")){
         this.mostraraceptantesnaturales();
         }else  if(ctipo.getSelectedItem().equals("ACEPTANTES JURIDICOS")){
         this.mostraraceptantesjuridicos();
         }else  if(ctipo.getSelectedItem().equals("REGISTROS CANCELADOS")){
         this.mostrarinactivos();
         }else  if(ctipo.getSelectedItem().equals("REGISTROS NO CANCELADOS")){
         this.mostraractivos();
         }
    }//GEN-LAST:event_ctipoActionPerformed
    }
    /**
     * @param args the command line arguments
     */
     public void iniciarcombo(){
      ctipo.addItem("TODOS");
         ctipo.addItem("ACEPTANTES NATURALES");
      ctipo.addItem("ACEPTANTES JURIDICOS");
       ctipo.addItem("AVALES NATURALES");
      ctipo.addItem("AVALES JURIDICOS");
       ctipo.addItem("REGISTROS NO CANCELADOS");
      ctipo.addItem("REGISTROS CANCELADOS");
       
    }
     
      public void mostrar(){
    DefaultTableModel modelo=new DefaultTableModel();
     modelo.addColumn("CODIGO");
      modelo.addColumn("AcepRazSoc");
      modelo.addColumn("AcepRep");
       modelo.addColumn("AvalRazSoc");
      modelo.addColumn("AvalRep");
      modelo.addColumn("RepGir");
      modelo.addColumn("Banco");
      modelo.addColumn("LugGir");
       modelo.addColumn("Monto");
      modelo.addColumn("TipMon");
      modelo.addColumn("FecGir");
      modelo.addColumn("FecVen");
       modelo.addColumn("Est");
    
      tabletipo.setModel(modelo);
      String datos[]=new String[13]; 
   String texto="SELECT RegLetCamCod,ACEPTANTE.AcepRazSoc,ACEPTANTE.AceprApePat,ACEPTANTE.AcepApeMat,ACEPTANTE.AcepNom,AVALES.AvalRazSoc,AVALES.AvalApePat,AVALES.AvalApeMat,AVALES.AvalNom,"+
   " REPRESENTANTEGIRADOR.RepGirApePat,REPRESENTANTEGIRADOR.RepGirApeMat,REPRESENTANTEGIRADOR.RepGirNom,BANCOS.BanNom,LUGARGIRO.LugGirNom,RegLetCamMont,TIPOMONEDA.TipMonNom,RegLetCamFecGirAño,RegLetCamFecGirMes,RegLetCamFecGirDia,RegLetCamFecVenAño,RegLetCamFecVenMes,RegLetCamFecVenDia,ESTADO.EstNom  " 
           + " FROM REGISTROLETRASCAMBIO INNER JOIN ACEPTANTE ON REGISTROLETRASCAMBIO.ACEPTANTE_AcepCod=ACEPTANTE.AcepCod "
           +" INNER JOIN AVALES ON REGISTROLETRASCAMBIO.AVALES_AvalCod=AVALES.AvalCod "+"INNER JOIN REPRESENTANTEGIRADOR ON REGISTROLETRASCAMBIO.REPRESENTANTEGIRADOR_RepGir1=REPRESENTANTEGIRADOR.RepGir "
           +"INNER JOIN BANCOS ON REGISTROLETRASCAMBIO.BANCOS_BanCod=BANCOS.BanCod "+ 
           "INNER JOIN LUGARGIRO ON REGISTROLETRASCAMBIO.LUGARGIRO_LugGirCod=LUGARGIRO.LugGirCod "
           +"INNER JOIN TIPOMONEDA ON REGISTROLETRASCAMBIO.TIPOMONEDA_TipMonCod=TIPOMONEDA.TipMonCod "+
           "INNER JOIN ESTADO ON REGISTROLETRASCAMBIO.ESTADO_EstCod=ESTADO.EstCod "+ " WHERE ESTADO.EstCod!='"+"*"+"'"+" ORDER BY ACEPTANTE.AcepRazSoc ASC,ACEPTANTE.AceprApePat ASC,ACEPTANTE.AcepApeMat ASC,ACEPTANTE.AcepNom ASC,AVALES.AvalRazSoc ASC,AVALES.AvalApePat ASC,AVALES.AvalApeMat ASC,AVALES.AvalNom ASC";
     try {
            Statement st=connection.createStatement();
              ResultSet result=st.executeQuery(texto);
            while(result.next()){
            datos[0]=result.getString(1);
            datos[1]=result.getString(2);
              datos[2]=result.getString(3)+" "+result.getString(4)+" "+result.getString(5);
              datos[3]=result.getString(6);
              datos[4]=result.getString(7)+" "+result.getString(8)+" "+result.getString(9);
            datos[5]=result.getString(10)+result.getString(11)+result.getString(12);
              datos[6]=result.getString(13);
                datos[7]=result.getString(14);
                datos[8]=result.getString(15);
                datos[9]=result.getString(16);
                datos[10]=result.getString(17)+"/"+result.getString(18)+"/"+result.getString(19);
                 datos[11]=result.getString(20)+"/"+result.getString(21)+"/"+result.getString(22);
                  datos[12]=result.getString(23);
            modelo.addRow(datos);
            }
            tabletipo.setModel(modelo);
        } catch (SQLException ex) {
            Logger.getLogger(TIPOREGISTROS.class.getName()).log(Level.SEVERE, null, ex);
        }
            
          
    }
      
      
      public void mostraractivos(){
    DefaultTableModel modelo=new DefaultTableModel();
     modelo.addColumn("CODIGO");
      modelo.addColumn("AcepRazSoc");
      modelo.addColumn("AcepRep");
       modelo.addColumn("AvalRazSoc");
      modelo.addColumn("AvalRep");
      modelo.addColumn("RepGir");
      modelo.addColumn("Banco");
      modelo.addColumn("LugGir");
       modelo.addColumn("Monto");
      modelo.addColumn("TipMon");
      modelo.addColumn("FecGir");
      modelo.addColumn("FecVen");
       modelo.addColumn("Est");
    
      tabletipo.setModel(modelo);
      String datos[]=new String[13]; 
   String texto="SELECT RegLetCamCod,ACEPTANTE.AcepRazSoc,ACEPTANTE.AceprApePat,ACEPTANTE.AcepApeMat,ACEPTANTE.AcepNom,AVALES.AvalRazSoc,AVALES.AvalApePat,AVALES.AvalApeMat,AVALES.AvalNom,"+
   " REPRESENTANTEGIRADOR.RepGirApePat,REPRESENTANTEGIRADOR.RepGirApeMat,REPRESENTANTEGIRADOR.RepGirNom,BANCOS.BanNom,LUGARGIRO.LugGirNom,RegLetCamMont,TIPOMONEDA.TipMonNom,RegLetCamFecGirAño,RegLetCamFecGirMes,RegLetCamFecGirDia,RegLetCamFecVenAño,RegLetCamFecVenMes,RegLetCamFecVenDia,ESTADO.EstNom  " 
           + " FROM REGISTROLETRASCAMBIO INNER JOIN ACEPTANTE ON REGISTROLETRASCAMBIO.ACEPTANTE_AcepCod=ACEPTANTE.AcepCod "
           +" INNER JOIN AVALES ON REGISTROLETRASCAMBIO.AVALES_AvalCod=AVALES.AvalCod "+"INNER JOIN REPRESENTANTEGIRADOR ON REGISTROLETRASCAMBIO.REPRESENTANTEGIRADOR_RepGir1=REPRESENTANTEGIRADOR.RepGir "
           +"INNER JOIN BANCOS ON REGISTROLETRASCAMBIO.BANCOS_BanCod=BANCOS.BanCod "+ 
           "INNER JOIN LUGARGIRO ON REGISTROLETRASCAMBIO.LUGARGIRO_LugGirCod=LUGARGIRO.LugGirCod "
           +"INNER JOIN TIPOMONEDA ON REGISTROLETRASCAMBIO.TIPOMONEDA_TipMonCod=TIPOMONEDA.TipMonCod "+
           "INNER JOIN ESTADO ON REGISTROLETRASCAMBIO.ESTADO_EstCod=ESTADO.EstCod "+ " WHERE ESTADO.EstCod='"+"A"+"'"+" ORDER BY ACEPTANTE.AcepRazSoc ASC,ACEPTANTE.AceprApePat ASC,ACEPTANTE.AcepApeMat ASC,ACEPTANTE.AcepNom ASC,AVALES.AvalRazSoc ASC,AVALES.AvalApePat ASC,AVALES.AvalApeMat ASC,AVALES.AvalNom ASC";
     try {
            Statement st=connection.createStatement();
              ResultSet result=st.executeQuery(texto);
            while(result.next()){
            datos[0]=result.getString(1);
            datos[1]=result.getString(2);
              datos[2]=result.getString(3)+" "+result.getString(4)+" "+result.getString(5);
              datos[3]=result.getString(6);
              datos[4]=result.getString(7)+" "+result.getString(8)+" "+result.getString(9);
            datos[5]=result.getString(10)+result.getString(11)+result.getString(12);
              datos[6]=result.getString(13);
                datos[7]=result.getString(14);
                datos[8]=result.getString(15);
                datos[9]=result.getString(16);
                datos[10]=result.getString(17)+"/"+result.getString(18)+"/"+result.getString(19);
                 datos[11]=result.getString(20)+"/"+result.getString(21)+"/"+result.getString(22);
                  datos[12]=result.getString(23);
            modelo.addRow(datos);
            }
            tabletipo.setModel(modelo);
        } catch (SQLException ex) {
            Logger.getLogger(TIPOREGISTROS.class.getName()).log(Level.SEVERE, null, ex);
        }
            
      
    }
      
       public void mostraraceptantesnaturales(){
    DefaultTableModel modelo=new DefaultTableModel();
     modelo.addColumn("CODIGO");
      modelo.addColumn("AcepNom");
       modelo.addColumn("AvalRazSoc");
      modelo.addColumn("AvalRep");
      modelo.addColumn("RepGir");
      modelo.addColumn("Banco");
      modelo.addColumn("LugGir");
       modelo.addColumn("Monto");
      modelo.addColumn("TipMon");
      modelo.addColumn("FecGir");
      modelo.addColumn("FecVen");
       modelo.addColumn("Est");
    
      tabletipo.setModel(modelo);
      String datos[]=new String[12]; 
   String texto="SELECT RegLetCamCod,ACEPTANTE.AceprApePat,ACEPTANTE.AcepApeMat,ACEPTANTE.AcepNom,AVALES.AvalRazSoc,AVALES.AvalApePat,AVALES.AvalApeMat,AVALES.AvalNom,"+
   " REPRESENTANTEGIRADOR.RepGirApePat,REPRESENTANTEGIRADOR.RepGirApeMat,REPRESENTANTEGIRADOR.RepGirNom,BANCOS.BanNom,LUGARGIRO.LugGirNom,RegLetCamMont,TIPOMONEDA.TipMonNom,RegLetCamFecGirAño,RegLetCamFecGirMes,RegLetCamFecGirDia,RegLetCamFecVenAño,RegLetCamFecVenMes,RegLetCamFecVenDia,ESTADO.EstNom  " 
           + " FROM REGISTROLETRASCAMBIO INNER JOIN ACEPTANTE ON REGISTROLETRASCAMBIO.ACEPTANTE_AcepCod=ACEPTANTE.AcepCod "
           +" INNER JOIN AVALES ON REGISTROLETRASCAMBIO.AVALES_AvalCod=AVALES.AvalCod "+"INNER JOIN REPRESENTANTEGIRADOR ON REGISTROLETRASCAMBIO.REPRESENTANTEGIRADOR_RepGir1=REPRESENTANTEGIRADOR.RepGir "
           +"INNER JOIN BANCOS ON REGISTROLETRASCAMBIO.BANCOS_BanCod=BANCOS.BanCod "+ 
           "INNER JOIN LUGARGIRO ON REGISTROLETRASCAMBIO.LUGARGIRO_LugGirCod=LUGARGIRO.LugGirCod "
           +"INNER JOIN TIPOMONEDA ON REGISTROLETRASCAMBIO.TIPOMONEDA_TipMonCod=TIPOMONEDA.TipMonCod "+
           "INNER JOIN ESTADO ON REGISTROLETRASCAMBIO.ESTADO_EstCod=ESTADO.EstCod "+ " WHERE (ESTADO.EstCod!='"+"*"+"')"+" AND (ACEPTANTE.AcepRazSoc='"+"')"+" ORDER BY ACEPTANTE.AceprApePat ASC,ACEPTANTE.AcepApeMat ASC,ACEPTANTE.AcepNom ASC,AVALES.AvalRazSoc ASC,AVALES.AvalApePat ASC,AVALES.AvalApeMat ASC,AVALES.AvalNom ASC";
     try {
            Statement st=connection.createStatement();
              ResultSet result=st.executeQuery(texto);
            while(result.next()){
            datos[0]=result.getString(1);
           datos[1]=result.getString(2)+" "+result.getString(3)+" "+result.getString(4);
              datos[2]=result.getString(5);
              datos[3]=result.getString(6)+" "+result.getString(7)+" "+result.getString(8);
            datos[4]=result.getString(9)+result.getString(10)+result.getString(11);
              datos[5]=result.getString(12);
                datos[6]=result.getString(13);
                datos[7]=result.getString(14);
                datos[8]=result.getString(15);
                datos[9]=result.getString(16)+"/"+result.getString(17)+"/"+result.getString(18);
                 datos[10]=result.getString(19)+"/"+result.getString(20)+"/"+result.getString(21);
                  datos[11]=result.getString(22);
            modelo.addRow(datos);
            }
            tabletipo.setModel(modelo);
        } catch (SQLException ex) {
            Logger.getLogger(TIPOREGISTROS.class.getName()).log(Level.SEVERE, null, ex);
        }
            
          
    }
       
       public void mostraraceptantesjuridicos(){
    DefaultTableModel modelo=new DefaultTableModel();
     modelo.addColumn("CODIGO");
      modelo.addColumn("AcepRazSoc");
       modelo.addColumn("AvalRazSoc");
      modelo.addColumn("AvalRep");
      modelo.addColumn("RepGir");
      modelo.addColumn("Banco");
      modelo.addColumn("LugGir");
       modelo.addColumn("Monto");
      modelo.addColumn("TipMon");
      modelo.addColumn("FecGir");
      modelo.addColumn("FecVen");
       modelo.addColumn("Est");
    
      tabletipo.setModel(modelo);
      String datos[]=new String[12]; 
   String texto="SELECT RegLetCamCod,ACEPTANTE.AcepRazSoc,AVALES.AvalRazSoc,AVALES.AvalApePat,AVALES.AvalApeMat,AVALES.AvalNom,"+
   " REPRESENTANTEGIRADOR.RepGirApePat,REPRESENTANTEGIRADOR.RepGirApeMat,REPRESENTANTEGIRADOR.RepGirNom,BANCOS.BanNom,LUGARGIRO.LugGirNom,RegLetCamMont,TIPOMONEDA.TipMonNom,RegLetCamFecGirAño,RegLetCamFecGirMes,RegLetCamFecGirDia,RegLetCamFecVenAño,RegLetCamFecVenMes,RegLetCamFecVenDia,ESTADO.EstNom  " 
           + " FROM REGISTROLETRASCAMBIO INNER JOIN ACEPTANTE ON REGISTROLETRASCAMBIO.ACEPTANTE_AcepCod=ACEPTANTE.AcepCod "
           +" INNER JOIN AVALES ON REGISTROLETRASCAMBIO.AVALES_AvalCod=AVALES.AvalCod "+"INNER JOIN REPRESENTANTEGIRADOR ON REGISTROLETRASCAMBIO.REPRESENTANTEGIRADOR_RepGir1=REPRESENTANTEGIRADOR.RepGir "
           +"INNER JOIN BANCOS ON REGISTROLETRASCAMBIO.BANCOS_BanCod=BANCOS.BanCod "+ 
           "INNER JOIN LUGARGIRO ON REGISTROLETRASCAMBIO.LUGARGIRO_LugGirCod=LUGARGIRO.LugGirCod "
           +"INNER JOIN TIPOMONEDA ON REGISTROLETRASCAMBIO.TIPOMONEDA_TipMonCod=TIPOMONEDA.TipMonCod "+
           "INNER JOIN ESTADO ON REGISTROLETRASCAMBIO.ESTADO_EstCod=ESTADO.EstCod "+ " WHERE (ESTADO.EstCod!='"+"*"+"')"+" AND (ACEPTANTE.AcepRazSoc!='"+"')"+" ORDER BY ACEPTANTE.AcepRazSoc ASC,AVALES.AvalRazSoc ASC,AVALES.AvalApePat ASC,AVALES.AvalApeMat ASC,AVALES.AvalNom ASC";
     try {
            Statement st=connection.createStatement();
              ResultSet result=st.executeQuery(texto);
            while(result.next()){
            datos[0]=result.getString(1);
           datos[1]=result.getString(2);
              datos[2]=result.getString(3);
              datos[3]=result.getString(4)+" "+result.getString(5)+" "+result.getString(6);
            datos[4]=result.getString(7)+" "+result.getString(8)+" "+result.getString(9);
              datos[5]=result.getString(10);
                datos[6]=result.getString(11);
                datos[7]=result.getString(12);
                datos[8]=result.getString(13);
                datos[9]=result.getString(14)+"/"+result.getString(15)+"/"+result.getString(16);
                 datos[10]=result.getString(17)+"/"+result.getString(18)+"/"+result.getString(19);
                  datos[11]=result.getString(20);
            modelo.addRow(datos);
            }
            tabletipo.setModel(modelo);
        } catch (SQLException ex) {
            Logger.getLogger(TIPOREGISTROS.class.getName()).log(Level.SEVERE, null, ex);
        }
            
          
    }
       
       
       public void mostrarinactivos(){
    DefaultTableModel modelo=new DefaultTableModel();
     modelo.addColumn("CODIGO");
      modelo.addColumn("AcepRazSoc");
      modelo.addColumn("AcepRep");
       modelo.addColumn("AvalRazSoc");
      modelo.addColumn("AvalRep");
      modelo.addColumn("RepGir");
      modelo.addColumn("Banco");
      modelo.addColumn("LugGir");
       modelo.addColumn("Monto");
      modelo.addColumn("TipMon");
      modelo.addColumn("FecGir");
      modelo.addColumn("FecVen");
       modelo.addColumn("Est");
    
      tabletipo.setModel(modelo);
      String datos[]=new String[13]; 
   String texto="SELECT RegLetCamCod,ACEPTANTE.AcepRazSoc,ACEPTANTE.AceprApePat,ACEPTANTE.AcepApeMat,ACEPTANTE.AcepNom,AVALES.AvalRazSoc,AVALES.AvalApePat,AVALES.AvalApeMat,AVALES.AvalNom,"+
   " REPRESENTANTEGIRADOR.RepGirApePat,REPRESENTANTEGIRADOR.RepGirApeMat,REPRESENTANTEGIRADOR.RepGirNom,BANCOS.BanNom,LUGARGIRO.LugGirNom,RegLetCamMont,TIPOMONEDA.TipMonNom,RegLetCamFecGirAño,RegLetCamFecGirMes,RegLetCamFecGirDia,RegLetCamFecVenAño,RegLetCamFecVenMes,RegLetCamFecVenDia,ESTADO.EstNom  " 
           + " FROM REGISTROLETRASCAMBIO INNER JOIN ACEPTANTE ON REGISTROLETRASCAMBIO.ACEPTANTE_AcepCod=ACEPTANTE.AcepCod "
           +" INNER JOIN AVALES ON REGISTROLETRASCAMBIO.AVALES_AvalCod=AVALES.AvalCod "+"INNER JOIN REPRESENTANTEGIRADOR ON REGISTROLETRASCAMBIO.REPRESENTANTEGIRADOR_RepGir1=REPRESENTANTEGIRADOR.RepGir "
           +"INNER JOIN BANCOS ON REGISTROLETRASCAMBIO.BANCOS_BanCod=BANCOS.BanCod "+ 
           "INNER JOIN LUGARGIRO ON REGISTROLETRASCAMBIO.LUGARGIRO_LugGirCod=LUGARGIRO.LugGirCod "
           +"INNER JOIN TIPOMONEDA ON REGISTROLETRASCAMBIO.TIPOMONEDA_TipMonCod=TIPOMONEDA.TipMonCod "+
           "INNER JOIN ESTADO ON REGISTROLETRASCAMBIO.ESTADO_EstCod=ESTADO.EstCod "+ " WHERE ESTADO.EstCod='"+"I"+"'"+" ORDER BY ACEPTANTE.AcepRazSoc ASC,ACEPTANTE.AceprApePat ASC,ACEPTANTE.AcepApeMat ASC,ACEPTANTE.AcepNom ASC,AVALES.AvalRazSoc ASC,AVALES.AvalApePat ASC,AVALES.AvalApeMat ASC,AVALES.AvalNom ASC";
     try {
            Statement st=connection.createStatement();
              ResultSet result=st.executeQuery(texto);
            while(result.next()){
            datos[0]=result.getString(1);
            datos[1]=result.getString(2);
              datos[2]=result.getString(3)+" "+result.getString(4)+" "+result.getString(5);
              datos[3]=result.getString(6);
              datos[4]=result.getString(7)+" "+result.getString(8)+" "+result.getString(9);
            datos[5]=result.getString(10)+" "+result.getString(11)+" "+result.getString(12);
              datos[6]=result.getString(13);
                datos[7]=result.getString(14);
                datos[8]=result.getString(15);
                datos[9]=result.getString(16);
                datos[10]=result.getString(17)+"/"+result.getString(18)+"/"+result.getString(19);
                 datos[11]=result.getString(20)+"/"+result.getString(21)+"/"+result.getString(22);
                  datos[12]=result.getString(23);
            modelo.addRow(datos);
            }
            tabletipo.setModel(modelo);
        } catch (SQLException ex) {
            Logger.getLogger(TIPOREGISTROS.class.getName()).log(Level.SEVERE, null, ex);
        }
            
          
    }
      
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TIPOREGISTROS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TIPOREGISTROS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TIPOREGISTROS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TIPOREGISTROS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TIPOREGISTROS().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ctipo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabletipo;
    // End of variables declaration//GEN-END:variables
int opcion=0;
    int contador=0;
String txestado="";
    Conectar co=new Conectar();
Connection connection=co.conexion();





}
